name: $(date:yyyyMMdd)$(rev:.r)

resources:
  repositories:
  - repository: self
    type: git
    ref: master

trigger:
  branches:
    include:
    - '*'  # default
  paths:
    include:
    - '*'  # default
  tags:
    include:
    - '*'  # default

# trigger: none
pr: # also allows branches and paths
  - '*' # default. These are PR target branches, e.g. master

stages:
- stage:
  displayName: First stage
  jobs:
  - job: job1
    displayName: Job 1
    pool:
      name: Azure Pipelines
      vmImage: ubuntu-latest
    steps:
    - pwsh: echo $(Build.Reason)
      displayName: Build.Reason
      continueOnError: true
# Manual: A user manually queued the build.
# IndividualCI: Continuous integration (CI) triggered by a Git push or a TFVC check-in.
# BatchedCI: Continuous integration (CI) triggered by a Git push or a TFVC check-in, and the Batch changes was selected.
# Schedule: Scheduled trigger.
# ValidateShelveset: A user manually queued the build of a specific TFVC shelveset.
# CheckInShelveset: Gated check-in trigger.
# PullRequest: The build was triggered by a Git branch policy that requires a build.
# ResourceTrigger: The build was triggered by a resource trigger or it was triggered by another build.
# 
# When a resource triggers a pipeline, the following variables get set:
# resources.triggeringAlias
# resources.triggeringCategory
    - pwsh: 'Get-ChildItem Env:'
      displayName: Log Environment
      continueOnError: true
    #- pwsh: echo '${{ convertToJson(variables) }}'
    - pwsh: echo '$(convertToJson(variables))'
      displayName: Log variables
      continueOnError: true
    - pwsh: echo '${{ convertToJson(parameters) }}'
      displayName: Log parameters
      continueOnError: true
    #These are not recognized, only the items itself, like Build.Reason
    #- pwsh: echo '${{ convertToJson(System) }}'
    #  displayName: Log System
    #  continueOnError: true
    #- pwsh: echo '${{ convertToJson(Pipeline) }}'
    #  displayName: Log Pipeline
    #  continueOnError: true
    #- pwsh: echo '${{ convertToJson(Agent) }}'
    #  displayName: Log Agent
    #  continueOnError: true
    #- pwsh: echo '${{ convertToJson(Build) }}'
    #  displayName: Log Build
    #  continueOnError: true
    - pwsh: dotnet --info
      displayName: Dotnet Info
      continueOnError: true
